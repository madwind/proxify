name: Build and Push Proxify Docker Image

on:
  push:
    branches: [ "master" ]

env:
  IMAGE_NAME: madwind/proxify

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set build time
        run: echo "BUILDTIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Read version from version.go
        run: |
          VERSION=$(grep -E 'const Version = ' version.go | sed -E 's/.*"(.+)".*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          build-args: |
            BUILDTIME=${{ env.BUILDTIME }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest for latest
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:latest \
            ${{ env.IMAGE_NAME }}:amd64 \
            ${{ env.IMAGE_NAME }}:arm64
          docker manifest push ${{ env.IMAGE_NAME }}:latest

      - name: Create and push multi-arch manifest for version tag
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.VERSION }} \
            ${{ env.IMAGE_NAME }}:amd64 \
            ${{ env.IMAGE_NAME }}:arm64
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
